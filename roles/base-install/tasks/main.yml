- name: set hostname from entry in hosts file
  hostname:
    name: "{{ inventory_hostname }}"

- name: copy inputrc to user directory
  copy:
    src: .inputrc
    dest: /home/ubuntu/.inputrc
    owner: ubuntu
    group: ubuntu
    mode: "0644"

- name: copy inputrc to root directory
  copy:
    src: .inputrc
    dest: /root/.inputrc
    owner: root
    group: root
    mode: "0644" 

- name: copy boot ops to enable cgroups
  copy:
    src: nobtcmd.txt
    dest: /boot/firmware/nobtcmd.txt
    owner: root
    group: root
    mode: "0644" 

- name: Install required packages
  package:
    name: "{{ item }}"
    state: latest
  loop:
      - apt-transport-https
      - ca-certificates
      - curl
      - software-properties-common
      - gnupg-agent
      - tar
      - unzip
      - docker.io

- name: copy docker deamon
  copy:
    src: ../files/daemon.json
    dest: /etc/docker/daemon.json
    owner: root
    group: root
    mode: "0644" 

- name: copy kubernetes repo config
  copy:
    src: kubernetes.list
    dest: /etc/apt/sources.list.d/kubernetes.list
    owner: root
    group: root
    mode: "0644" 

- name: Add kubernetes Apt signing key
  apt_key:
    url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
    state: present

- name: Update repositories cache
  apt:
    update_cache: yes

- name: Install kubernetes packages
  package:
    name: "{{ item }}"
    state: latest
  loop:
    - kubelet
    - kubeadm
    - kubectl

# - name: Create a directory if it does not exist
#   file:
#     path: "{{ item }}"
#     state: directory
#     mode: '0755'
#   loop:
#     - "{{ kubernetes_dir }}"
#     - "{{ kubernetes_temp_dir }}"

# - name: Check for kubernetes download in /tmp
#   stat: 
#     path: "{{ kubernetes_temp_dir }}/kubernetes"
#   register: p

# kubeadm join 10.1.3.2:6443 --token sx64wz.mbn6ib4zxuwcus7d \
# >     --discovery-token-ca-cert-hash sha256:3baa9e8c1219ebca358d373ecae7853f9cf89f2f10e559ee6804bdd65fdd8370

# - name: Download and unarchive kubernetes
#   unarchive:
#     src: "{{ kubernetes_download_url }}"
#     dest: "{{ kubernetes_temp_dir }}"
#     remote_src: yes
#   when: p.stat.exists == false

# - name: Copy kubernetes binaries to /usr/local/bin
#   copy:
#     src: "{{ kubernetes_temp_dir }}/kubernetes/node/bin/{{ item }}"
#     dest: "/usr/local/bin/{{ item }}"
#     owner: root
#     group: root
#     remote_src: yes
#     mode: '0755'
#   loop:
#     - kubelet
#     - kubeadm
#     - kubectl
#     - kube-proxy

- name: Reboot and wait up to 5 minutes for the host to respond
  reboot:
    reboot_timeout: 300

- name: Enable and start docker
  service:
    name: docker
    state: started
    daemon_reload: yes
    enabled: yes
    
- name: Enable and stop kubelet
  service:
    name: kubelet
    state: stopped
    daemon_reload: yes
    enabled: yes

- name: Ensure kubernetes and etcd does not exist from a prior install
  file:
    path: "{{ item }}"
    state: absent
  loop:
    - /root/.kube/config
    - /var/lib/etcd
    - /var/lib/kubelet
    - /etc/kuberentes
    - /etc/kuberentes/pki
    - /etc/cni/net.d

- name: run kubeadm reset command to ensure everything is cleaned up
  shell:
    cmd: "kubeadm reset --force"
